# This GitHub Actions workflow is designed to automate the deployment of a Docker image embedded with Aqua's MicroEnforcer to Google Cloud Run. 
# The workflow includes steps for:
# - Checking out the code from the repository.
# - Logging in to GitHub Container Registry.
# - Pulling the specified container image.
# - Injecting Aqua's MicroEnforcer into the container image.
# - Scanning the embedded image with Aqua's scanner and pushing it to Google Artifact Registry.
# - Generating a unique service name for Cloud Run deployment.
# - Deploying the image to Cloud Run and setting necessary environment variables.
# - Testing the deployed container's endpoints.
# - Removing the Cloud Run service upon completion.

name: GCP Cloud Run App & Embedded ME

on:
  workflow_dispatch:
    inputs:
      branchName:
        description: 'Branch Name (manual trigger)' 
        required: true
        default: 'grazzer'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SERVICE_ACCOUNT: py-rats-chest-demo@niamhaiy.iam.gserviceaccount.com
  GCP_REGION: us-central1
  IMAGE_NAME: py-rats-chest
  IMAGE_TAG: latest
  SERVICE_NAME: embedded-me-demo-
  ARTIFACTORY_REPO_NAME: py-rats-chest-repo

jobs:
  setup-build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Pull the specified container image
      - name: Pull the Container Image
        run: docker pull ghcr.io/allthingsclowd/$IMAGE_NAME:$IMAGE_TAG

      # Inject MicroEnforcer into the container image using Aqua's tool
      - name: Inject MicroEnforcer with aquactl
        run: |
          wget --user ${{ secrets.AQUASEC_USERNAME }} --password ${{ secrets.AQUASEC_PASSWORD }} https://get.aquasec.com/aquactl/v3/aquactl
          chmod +x aquactl
          wget --user ${{ secrets.AQUASEC_USERNAME }} --password ${{ secrets.AQUASEC_PASSWORD }} https://download.aquasec.com/micro-enforcer/2022.4.460/x86/microenforcer
          chmod +x microenforcer
          sudo ./aquactl inject --src-image ghcr.io/allthingsclowd/$IMAGE_NAME:$IMAGE_TAG --dst-image ghcr.io/allthingsclowd/$IMAGE_NAME-embedded:$IMAGE_TAG --microenforcer-binary ./microenforcer --aqua-server ${{ secrets.AQUA_SERVER }} --aqua-token ${{ secrets.AQUA_TOKEN }}

      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: true

      # Ensure the Artifact Registry repository exists
      - name: Check and create Artifact Registry repository
        run: gcloud artifacts repositories describe $ARTIFACTORY_REPO_NAME --location=us-central1 || gcloud artifacts repositories create $ARTIFACTORY_REPO_NAME --location=us-central1 --repository-format=docker

      # Scan the embedded image with Aqua and register it to the Aqua Console
      - name: Aqua Image Scanner - Scan Embedded Image and Register to Aqua Console
        run: |
          docker image ls
          docker login registry.aquasec.com -u ${{ secrets.AQUASEC_USERNAME }} -p ${{ secrets.AQUASEC_PASSWORD }}
          docker pull registry.aquasec.com/scanner:2022.4
          docker run --rm -v $GITHUB_WORKSPACE:/tmp \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e BUILD_NUMBER=$IMAGE_TAG \
            -e BUILD_JOB_NAME=$IMAGE_NAME-embedded \
            registry.aquasec.com/scanner:2401.3.21 scan -w /tmp \
              --socket docker \
              --host ${{ secrets.AQUA_SCANNER_HOST }} \
              --token ${{ secrets.AQUA_SCANNER_TOKEN }} \
              --show-negligible \
              --register-compliant \
              --registry "Google" \
              --local ghcr.io/allthingsclowd/$IMAGE_NAME-embedded:$IMAGE_TAG \
              --htmlfile /tmp/out.html \
              --jsonfile /tmp/out.json \
              > /dev/null

      # Authenticate Docker with Google Artifact Registry
      - name: Authenticate Docker to Google Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      # Tag and push the image to Google Artifact Registry
      - name: Tag and Push to Google Artifact Registry
        run: |
          docker tag ghcr.io/allthingsclowd/$IMAGE_NAME-embedded:$IMAGE_TAG us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACTORY_REPO_NAME/$IMAGE_NAME-embedded:$IMAGE_TAG
          docker push us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACTORY_REPO_NAME/$IMAGE_NAME-embedded:$IMAGE_TAG

      # Generate a unique service name for Cloud Run and make it available for subsequent steps
      - name: Generate and set GCP_SERVICE_NAME
        run: |
          GCP_SERVICE_NAME="${SERVICE_NAME}$(tr -dc 'a-z0-9' </dev/urandom | head -c 5 2>/dev/null)"
          echo "GCP_SERVICE_NAME=${GCP_SERVICE_NAME}" >> $GITHUB_ENV

      # Deploy the image to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.GCP_SERVICE_NAME }} \
          --image us-central1-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACTORY_REPO_NAME/$IMAGE_NAME-embedded:$IMAGE_TAG \
          --platform managed \
          --region $GCP_REGION \
          --allow-unauthenticated \
          --project $GCP_PROJECT_ID \
          --port 5000 \
          --set-env-vars CONTAINER_PORT=5000 \
          --set-env-vars AQUA_LOGICAL_NAME=${{ env.GCP_SERVICE_NAME }} \
          --set-env-vars AQUA_TOKEN=${{ secrets.AQUA_TOKEN }} \
          --set-env-vars AQUA_SERVER=${{ secrets.AQUA_SERVER }} \
          --set-env-vars AQUA_MICROENFORCER=1 \ 
          --set-env-vars LD_PRELOAD="/.aquasec/bin/$PLATFORM/slklib.so" \
          --set-env-vars AQUA_DEBUG_LEVEL=3 \
          --set-env-vars AQUA_DEBUG_TYPE=STDOUT

      # Test the deployed container's endpoints
#      - name: Test container endpoints in cloud
#        run: |
#          sleep 5 # Give it some time to start up
#          url=$(gcloud run services describe ${{ env.GCP_SERVICE_NAME }} --region=us-central1 --format="value(status.address.url)")
#          echo "Testing $url"
#          curl -X POST --fail $url/generate_traffic || { echo 'generate_traffic test failed'; exit 1; }
#          curl -X POST --fail $url/deploy_malware || { echo 'deploy_malware test failed'; exit 1; }
#          curl -X POST --fail $url/deploy_nmap || { echo 'deploy_nmap test failed'; exit 1; }
#          curl -X POST --fail $url/read_passwords || { echo 'read_passwords test failed'; exit 1; }

      # Remove the Cloud Run service after testing
#      - name: Remove Service from Cloud Run
#        run: gcloud run services delete ${{ env.GCP_SERVICE_NAME }} --region=$GCP_REGION --quiet
